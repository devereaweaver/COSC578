/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.dbgui;

/**
 *
 * @author devere
 */
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Clock;
import java.time.ZoneId;
import javax.swing.table.*;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JPasswordField;

public class DBGui extends javax.swing.JFrame {

    // global
    public static String attorneyID;
    public static String fname;
    public static String minit;
    public static String lname;
    public static String specialization;
    public static String phone;
    public static String address;
    public static String officeNum;
    public static String clientID;
    public static String clientName;
    public static String clientType;
    public static String caseID;
    public static String caseStatus;
    public static String caseType;
    public static String dateFiled;
    public static String invoiceNumber;
    public static String dateIssued;
    public static String paymentStatus;
    public static String amount;
    public static String billableHours;
    public static String court;
    public static String courtName;
    public static String legalDocument;
    public static String id = "";
    public static String pw = "";
    public static String server = "";

    /**
     * Creates new form DBGui
     */
    public DBGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton3.setText("Clear Table");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(260, 260, 260))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Case Management"));

        jButton4.setText("Cases by Attorney ID");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton21.setText("Cases by Status");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton21))
                .addContainerGap(339, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton21, jButton4});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton21)
                .addGap(0, 64, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton21, jButton4});

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Information"));

        jButton10.setText("All Client data");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton13.setText("By Name");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton11.setText("By Attorney");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Client Cases");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton14.setText("Update Client");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(102, 255, 51));
        jButton15.setText("Add Client");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(255, 0, 0));
        jButton16.setForeground(new java.awt.Color(255, 255, 255));
        jButton16.setText("Remove Client");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton10)
                        .addGap(18, 18, 18)
                        .addComponent(jButton14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton13)
                        .addGap(18, 18, 18)
                        .addComponent(jButton15))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addGap(18, 18, 18)
                        .addComponent(jButton16))
                    .addComponent(jButton12))
                .addGap(0, 251, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton10, jButton11, jButton12, jButton13, jButton14, jButton15, jButton16});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13)
                    .addComponent(jButton15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton10, jButton11, jButton12, jButton13, jButton14, jButton15, jButton16});

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Billing"));

        jButton17.setText("All Billing Data");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Billable Hours by Attorney");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Payment Status");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton17)
                    .addComponent(jButton18)
                    .addComponent(jButton19))
                .addGap(0, 317, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton17, jButton18, jButton19});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton19)
                .addGap(0, 35, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton17, jButton18, jButton19});

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Personnel"));

        jButton2.setText("All Attorney Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("By ID");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("By First Name");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("By Last Name");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("By Specialization");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(51, 255, 51));
        jButton8.setText("Add Attorney");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(255, 51, 51));
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("Delete Attorney");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9))
                    .addComponent(jButton6))
                .addContainerGap(227, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton5, jButton6, jButton7, jButton8, jButton9});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton5, jButton6, jButton7, jButton8, jButton9});

        jButton20.setText("Connect");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton20)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(703, 703, 703))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel2, jPanel3, jPanel4, jPanel5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton20)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel2, jPanel3, jPanel4, jPanel5});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Get all attorney data
        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement stmt = con.createStatement();

            // try out a prepared statement
            PreparedStatement getTables = con.prepareStatement("select * from attorney");

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // let's see the tables
            //ResultSet rs = stmt.executeQuery("show tables");
            ResultSet rs = getTables.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                attorneyID = rs.getString(1);
                fname = rs.getString(2);
                minit = rs.getString(3);
                lname = rs.getString(4);
                specialization = rs.getString(5);
                phone = rs.getString(6);
                address = rs.getString(7);
                officeNum = rs.getString(8);
                String[] row = {attorneyID, fname, minit, lname, specialization, phone, address, officeNum};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Clear table button
        jTable1.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Get cases for specific attorney
        attorneyID = JOptionPane.showInputDialog(null, "Enter attorney id:");
        String query = "select c.case_id, c.attorney, c.case_status, c.date_filed, c.case_type, t.name\n"
                + "from client_case c, court t\n"
                + "where c.attorney = ?\n"
                + "and c.court = t.court_id;";

        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);

            // try out a prepared statement
            PreparedStatement stmt = con.prepareStatement(query);

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // fill in parameters 
            stmt.setString(1, attorneyID);
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            String case_id, attorney, case_status, date_filed, case_type;
            // iterate over result set to see resutls
            while (rs.next()) {
                case_id = rs.getString(1);
                attorney = rs.getString(2);
                case_status = rs.getString(3);
                date_filed = rs.getString(4);
                case_type = rs.getString(5);
                courtName = rs.getString(6);
                String[] row = {case_id, attorney, case_status, date_filed, case_type, courtName};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Get attorney by id
        attorneyID = JOptionPane.showInputDialog(null, "Enter attorney id:");
        String query = "select * from attorney where attorney_id = ?";

        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);

            // try out a prepared statement
            PreparedStatement stmt = con.prepareStatement(query);

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // fill in parameters 
            stmt.setString(1, attorneyID);
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                attorneyID = rs.getString(1);
                fname = rs.getString(2);
                minit = rs.getString(3);
                lname = rs.getString(4);
                specialization = rs.getString(5);
                phone = rs.getString(6);
                address = rs.getString(7);
                officeNum = rs.getString(8);
                String[] row = {attorneyID, fname, minit, lname, specialization, phone, address, officeNum};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Get attorney by first name
        String name = JOptionPane.showInputDialog(null, "Enter attorney first name:");
        String query = "select * from attorney where fname like '%" + name + "%'";

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                attorneyID = rs.getString(1);
                fname = rs.getString(2);
                minit = rs.getString(3);
                lname = rs.getString(4);
                specialization = rs.getString(5);
                phone = rs.getString(6);
                address = rs.getString(7);
                officeNum = rs.getString(8);
                String[] row = {attorneyID, fname, minit, lname, specialization, phone, address, officeNum};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Get attorney by last name
        String name = JOptionPane.showInputDialog(null, "Enter attorney last name:");
        String query = "select * from attorney where lname like '%" + name + "%'";

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                attorneyID = rs.getString(1);
                fname = rs.getString(2);
                minit = rs.getString(3);
                lname = rs.getString(4);
                specialization = rs.getString(5);
                phone = rs.getString(6);
                address = rs.getString(7);
                officeNum = rs.getString(8);
                String[] row = {attorneyID, fname, minit, lname, specialization, phone, address, officeNum};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Get attorney by specialization
        String name = JOptionPane.showInputDialog(null, "Enter attorney specialization:");
        String query = "select * from attorney where specialization like '%" + name + "%'";

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                attorneyID = rs.getString(1);
                fname = rs.getString(2);
                minit = rs.getString(3);
                lname = rs.getString(4);
                specialization = rs.getString(5);
                phone = rs.getString(6);
                address = rs.getString(7);
                officeNum = rs.getString(8);
                String[] row = {attorneyID, fname, minit, lname, specialization, phone, address, officeNum};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // Add an attorney
        JTextField f1 = new JTextField();
        JTextField f2 = new JTextField();
        JTextField f3 = new JTextField();
        JTextField f4 = new JTextField();
        JTextField f5 = new JTextField();
        JTextField f6 = new JTextField();
        JTextField f7 = new JTextField();

        Object[] data = {
            "First name:", f1,
            "Middle init:", f2,
            "Last name:", f3,
            "Specialization:", f4,
            "Phone:", f5,
            "Address:", f6,
            "Office number:", f7,};

        JOptionPane.showMessageDialog(null, data, "New Attorney", JOptionPane.INFORMATION_MESSAGE);

        String query = "insert into  attorney (fname, minit, lname, specialization, attorney_phone, address, office_number)\n"
                + "values \n"
                + "    (?,?,?,?,?,?,?)";

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");

            // fill in parameters 
            // fill in those values
            stmt.setString(1, f1.getText());
            stmt.setString(2, f2.getText());
            stmt.setString(3, f3.getText());
            stmt.setString(4, f4.getText());
            stmt.setString(5, f5.getText());
            stmt.setString(6, f6.getText());
            stmt.setString(7, f7.getText());
            int rows = stmt.executeUpdate();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // iterate over result set to see resutls
            System.out.println(rows + " row(s) affected.");

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // Delete an attorney
        attorneyID = JOptionPane.showInputDialog(null, "Enter attorney id:");
        String query = "delete from attorney where attorney_id=" + attorneyID;

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            stmt.executeQuery("set foreign_key_checks = off");
            int rows = stmt.executeUpdate();
            System.out.println(rows + " row(s) affected.");
            stmt.executeQuery("set foreign_key_checks = on");

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // Get client cases
        clientID = JOptionPane.showInputDialog(null, "Enter client id:");
        String query = "select c.client_name, cc.case_id, cc.case_status, cc.case_type, cc.date_filed\n"
                + "from client c, client_case cc\n"
                + "where c.attorney = cc.attorney\n"
                + "and c.client_id = ?";

        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);

            // try out a prepared statement
            PreparedStatement stmt = con.prepareStatement(query);

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // fill in parameters 
            stmt.setString(1, clientID);
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                clientName = rs.getString(1);
                caseID = rs.getString(2);
                caseStatus = rs.getString(3);
                caseType = rs.getString(4);
                dateFiled = rs.getString(5);
                String[] row = {clientName, caseID, caseStatus, caseType, dateFiled};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // Get all client data
        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement stmt = con.createStatement();

            // try out a prepared statement
            PreparedStatement getTables = con.prepareStatement("select * from client");

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // let's see the tables
            //ResultSet rs = stmt.executeQuery("show tables");
            ResultSet rs = getTables.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                clientID = rs.getString(1);
                clientName = rs.getString(2);
                phone = rs.getString(3);
                clientType = rs.getString(4);
                address = rs.getString(5);
                attorneyID = rs.getString(6);
                String[] row = {clientID, clientName, phone, clientType, address, attorneyID};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // Get client by name
        String name = JOptionPane.showInputDialog(null, "Enter client name:");
        String query = "select * from client where client_name like '%" + name + "%'";

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                clientID = rs.getString(1);
                clientName = rs.getString(2);
                phone = rs.getString(3);
                clientType = rs.getString(4);
                address = rs.getString(5);
                attorneyID = rs.getString(6);
                String[] row = {clientID, clientName, phone, clientType, address, attorneyID};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // Get client information from attorney id
        attorneyID = JOptionPane.showInputDialog(null, "Enter attorney id:");
        String query = "select c.client_id, c.client_name, c.phone, c.client_type, a.attorney_id, a.fname, a.lname\n"
                + "from client c, attorney a\n"
                + "where a.attorney_id = ?\n"
                + "and a.attorney_id = c.attorney;";

        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);

            // try out a prepared statement
            PreparedStatement stmt = con.prepareStatement(query);

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // fill in parameters 
            stmt.setString(1, attorneyID);
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            // iterate over result set to see resutls
            while (rs.next()) {
                clientID = rs.getString(1);
                clientName = rs.getString(2);
                phone = rs.getString(3);
                clientType = rs.getString(4);
                address = rs.getString(5);
                attorneyID = rs.getString(6);
                String[] row = {clientID, clientName, phone, clientType, address, attorneyID};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // Update Client
        // Add an attorney
        JTextField f1 = new JTextField();
        JTextField f2 = new JTextField();
        JTextField f3 = new JTextField();
//        JTextField f4 = new JTextField();
        JComboBox f4 = new JComboBox();
        f4.addItem("Individual");
        f4.addItem("Corporate");
        JTextField f5 = new JTextField();
        JTextField f6 = new JTextField();

        Object[] data = {
            "Client Id:", f1,
            "Client name:", f2,
            "Phone:", f3,
            "Client Type:", f4,
            "Address:", f5,
            "Attorney ID:", f6,};

        JOptionPane.showMessageDialog(null, data, "Update Client", JOptionPane.INFORMATION_MESSAGE);

        String query = "update client \n"
                + "set client_name = ?, phone = ?, client_type = ?, address = ?, attorney = ?\n"
                + "where client_id = ?;";

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");
            stmt.executeQuery("set sql_safe_updates = 0");

            stmt.setString(1, f2.getText());
            stmt.setString(2, f3.getText());
            stmt.setString(3, (String) f4.getSelectedItem());
            stmt.setString(4, f5.getText());
            stmt.setString(5, f6.getText());
            stmt.setString(6, f1.getText());
            int rows = stmt.executeUpdate();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // iterate over result set to see resutls
            System.out.println(rows + " row(s) affected.");

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }

    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // Add an attorney
        JTextField f1 = new JTextField();
        JTextField f2 = new JTextField();
        JTextField f3 = new JTextField();
        JTextField f4 = new JTextField();
        JTextField f5 = new JTextField();

        Object[] data = {
            "Client name:", f1,
            "Phone:", f2,
            "Client Type:", f3,
            "Address:", f4,
            "Attorney ID:", f5,};

        JOptionPane.showMessageDialog(null, data, "New Client", JOptionPane.INFORMATION_MESSAGE);

        String query = "insert into client (client_name, phone, client_type, address, attorney) \n"
                + "values \n"
                + "	(?, ?, ?, ?, ?);";

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");

            stmt.setString(1, f1.getText());
            stmt.setString(2, f2.getText());
            stmt.setString(3, f3.getText());
            stmt.setString(4, f4.getText());
            stmt.setString(5, f5.getText());
            int rows = stmt.executeUpdate();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // iterate over result set to see resutls
            System.out.println(rows + " row(s) affected.");

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // Remove a client 
        clientID = JOptionPane.showInputDialog(null, "Enter client id:");
        String query = "delete from client where client_id =" + clientID;

        try {
            Connection con = DriverManager.getConnection(server, id, pw);
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.executeQuery("use law_firm");

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            stmt.executeQuery("set foreign_key_checks = off");
            int rows = stmt.executeUpdate();
            System.out.println(rows + " row(s) affected.");
            stmt.executeQuery("set foreign_key_checks = on");

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // Get all billing data
        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement stmt = con.createStatement();

            // try out a prepared statement
            PreparedStatement getTables = con.prepareStatement("select * from billing");

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // let's see the tables
            //ResultSet rs = stmt.executeQuery("show tables");
            ResultSet rs = getTables.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                invoiceNumber = rs.getString(1);
                dateIssued = rs.getString(2);
                paymentStatus = rs.getString(3);
                amount = rs.getString(4);
                billableHours = rs.getString(5);
                clientID = rs.getString(6);
                String[] row = {invoiceNumber, dateIssued, paymentStatus, amount, billableHours, clientID};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // Payment status query
        JComboBox status = new JComboBox();
        status.addItem("Draft");
        status.addItem("Sent");
        status.addItem("Paid");
        status.addItem("Partial");
        status.addItem("Overdue");
        JOptionPane.showMessageDialog(null, status, "Select Payment Status", JOptionPane.INFORMATION_MESSAGE);

        String selectedStatus = (String) status.getSelectedItem();

        String query = "select * \n"
                + "from billing \n"
                + "where payment_status = '" + selectedStatus + "';";
        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement stmt = con.createStatement();

            // try out a prepared statement
            PreparedStatement getTables = con.prepareStatement(query);

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // let's see the tables
            //ResultSet rs = stmt.executeQuery("show tables");
            ResultSet rs = getTables.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                invoiceNumber = rs.getString(1);
                dateIssued = rs.getString(2);
                paymentStatus = rs.getString(3);
                amount = rs.getString(4);
                billableHours = rs.getString(5);
                clientID = rs.getString(6);
                String[] row = {invoiceNumber, dateIssued, paymentStatus, amount, billableHours, clientID};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // Connect to the database by setting the static user id and password vars
        JTextField user = new JTextField();
        JPasswordField password = new JPasswordField();

        Object[] data = {
            "User name:", user,
            "Password:", password,};

        JOptionPane.showMessageDialog(null, data, "Connect to DB", JOptionPane.INFORMATION_MESSAGE);

        // Set globals 
        id = user.getText();
        pw = new String(password.getPassword());
        server = "jdbc:mysql://localhost:3306/?serverTimezone=EST#/?user=" + id;

        System.out.println("Username: " + id);
        System.out.println("Password: " + pw);
        System.out.println("Sever: " + server);

        //"jdbc:mysql://localhost:3306/?serverTimezone=EST#/?user=root"
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // Get billable hours by attorney id
        attorneyID = JOptionPane.showInputDialog(null, "Enter attorney id:");
        String query = "select sum(billable_hours) as total_hours, attorney_id, fname, lname\n"
                + "from billing, attorney\n"
                + "where client = (\n"
                + "select c.client_id\n"
                + "from client c, attorney a\n"
                + "where a.attorney_id =" + attorneyID + "\n"
                + "and c.attorney = a.attorney_id\n"
                + ")\n"
                + "and attorney_id =" + attorneyID + ";";

        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);

            // try out a prepared statement
            PreparedStatement stmt = con.prepareStatement(query);

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // fill in parameters 
            ResultSet rs = stmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                String totalHours = rs.getString(1);
                attorneyID = rs.getString(2);
                fname = rs.getString(3);
                lname = rs.getString(4);
                String[] row = {totalHours, attorneyID, fname, lname};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // Get all cases by status category
        // Payment status query
        JComboBox status = new JComboBox();
        status.addItem("Pending");
        status.addItem("In-Progress");
        status.addItem("Closed");
        JOptionPane.showMessageDialog(null, status, "Select Case Status", JOptionPane.INFORMATION_MESSAGE);

        String selectedStatus = (String) status.getSelectedItem();

        String query = "select * from client_case \n"
                + "where case_status = '" + selectedStatus + "';\n";

        try {
            // connect to MySQL server
            Connection con = DriverManager.getConnection(server, id, pw);
            Statement stmt = con.createStatement();

            // try out a prepared statement
            PreparedStatement getTables = con.prepareStatement(query);

            // connect to the correct schema
            stmt.executeQuery("use law_firm");

            // let's see the tables
            //ResultSet rs = stmt.executeQuery("show tables");
            ResultSet rs = getTables.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            // create a table model 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // get column count and names 
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];

            // iterate over array and get column info and set it in the table
            for (int i = 0; i < cols; i++) {
                colName[i] = rsmd.getColumnName(i + 1);
            }
            model.setColumnIdentifiers(colName);

            // iterate over result set to see resutls
            while (rs.next()) {
                caseID = rs.getString(1);
                caseStatus = rs.getString(2);
                dateFiled = rs.getString(3);
                caseType = rs.getString(4);
                court = rs.getString(5);
                attorneyID = rs.getString(6);
                invoiceNumber = rs.getString(7);
                legalDocument = rs.getString(8);
                String[] row = {caseID, caseStatus, dateFiled, caseType, court, attorneyID, invoiceNumber, legalDocument};
                model.addRow(row);
            }

            // close statement and connection 
            stmt.close();
            con.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton21ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DBGui().setVisible(true);
            }
        });
    } // END MAIN

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
